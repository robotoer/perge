{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import Peer from 'peerjs'\r\nimport * as Automerge from 'automerge'\r\n\r\nexport interface PergeConfig<T> {\r\n  decode?: (msg: string) => any\r\n  encode?: (msg: any) => string\r\n  peerInstance?: Peer\r\n  docSet?: Automerge.DocSet<T>\r\n}\r\n\r\ntype DocHandler<T> = (doc: Automerge.Doc<T>) => void\r\n\r\nexport default class Perge<T> {\r\n  private _connections: {[id: string]: Automerge.Connection<T> } = {}\r\n\r\n  private _actorId: string\r\n  private _docSet: Automerge.DocSet<T>\r\n  private _peerInstance: Peer\r\n  private _encode: (msg: any) => string\r\n  private _decode: (msg: string) => any\r\n\r\n  constructor (actorId: string, config: PergeConfig<T> = {}) {\r\n    this._actorId = actorId\r\n    this._peerInstance = config.peerInstance || new Peer(this._actorId)\r\n    this._docSet = config.docSet || new Automerge.DocSet()\r\n    this._encode = config.encode || JSON.stringify\r\n    this._decode = config.decode || JSON.parse\r\n    this._peerInstance.on('connection', conn => {\r\n      conn.on('data', msg => {\r\n        this._connections[conn.peer].receiveMsg(this._decode(msg))\r\n        console.log('Perge received a message!');\r\n      })\r\n    })\r\n  }\r\n\r\n  public get docSet () {\r\n    return this._docSet\r\n  }\r\n\r\n  public connect (id: string, conn?: Peer.DataConnection): void {\r\n    if (this._connections[id]) return\r\n    const peer = conn || this._peerInstance.connect(id)\r\n    const connection = this._connections[id] = new Automerge.Connection(this._docSet, msg => {\r\n      peer.send(this._encode(msg))\r\n      console.log('Perge sent a message!');\r\n    })\r\n    peer.on('disconnected', () => {\r\n      connection.close()\r\n      delete this._connections[id]\r\n      console.log('Perge disconnected!');\r\n    })\r\n    connection.open()\r\n  }\r\n\r\n  public select (id: string): (fn: Function, ...args: any[]) => Automerge.Doc<T> {\r\n    const doc = this.docSet.getDoc(id) || Automerge.init(this._actorId)\r\n    return (fn: Function, ...args: any[]): Automerge.Doc<T> => {\r\n      const newDoc = fn(doc, ...args)\r\n      this.docSet.setDoc(id, newDoc)\r\n      return newDoc\r\n    }\r\n  }\r\n\r\n  public subscribe(idOrSetHandler: string | Automerge.DocSetHandler<T>, docHandler?: DocHandler<T>): () => void {\r\n    if (typeof idOrSetHandler === 'function') {\r\n      this.docSet.registerHandler(idOrSetHandler)\r\n      return () => this.docSet.unregisterHandler(idOrSetHandler)\r\n    }\r\n    if (typeof idOrSetHandler === 'string') {\r\n      const handler = (docId: string, doc: Automerge.Doc<T>) => {\r\n        if(docId === idOrSetHandler) docHandler(doc)\r\n      }\r\n      this.docSet.registerHandler(handler)\r\n      return () => this.docSet.unregisterHandler(handler)\r\n    }\r\n  }\r\n}\r\n"],"names":["constructor","actorId","config","this","_actorId","_peerInstance","peerInstance","Peer","_docSet","docSet","Automerge","_encode","encode","JSON","stringify","_decode","decode","parse","on","conn","msg","_connections","peer","receiveMsg","console","log","connect","id","connection","send","close","open","select","doc","getDoc","fn","args","newDoc","setDoc","subscribe","idOrSetHandler","docHandler","registerHandler","unregisterHandler","handler","docId"],"mappings":"kVAqBEA,YAAaC,EAAiBC,EAAyB,IAR/CC,kBAAyD,GAS/DA,KAAKC,SAAWH,EAChBE,KAAKE,cAAgBH,EAAOI,cAAgB,IAAIC,EAAKJ,KAAKC,UAC1DD,KAAKK,QAAUN,EAAOO,QAAU,IAAIC,SACpCP,KAAKQ,QAAUT,EAAOU,QAAUC,KAAKC,UACrCX,KAAKY,QAAUb,EAAOc,QAAUH,KAAKI,MACrCd,KAAKE,cAAca,GAAG,aAAcC,IAClCA,EAAKD,GAAG,OAAQE,IACdjB,KAAKkB,aAAaF,EAAKG,MAAMC,WAAWpB,KAAKY,QAAQK,IACrDI,QAAQC,IAAI,iCAKlBhB,aACE,YAAYD,QAGPkB,QAASC,EAAYR,GAC1B,GAAIhB,KAAKkB,aAAaM,GAAK,OAC3B,MAAML,EAAOH,GAAQhB,KAAKE,cAAcqB,QAAQC,GAC1CC,EAAazB,KAAKkB,aAAaM,GAAM,IAAIjB,aAAqBP,KAAKK,QAASY,IAChFE,EAAKO,KAAK1B,KAAKQ,QAAQS,IACvBI,QAAQC,IAAI,2BAEdH,EAAKJ,GAAG,eAAgB,KACtBU,EAAWE,oBACCT,aAAaM,GACzBH,QAAQC,IAAI,yBAEdG,EAAWG,OAGNC,OAAQL,GACb,MAAMM,EAAM9B,KAAKM,OAAOyB,OAAOP,IAAOjB,OAAeP,KAAKC,UAC1D,MAAO,CAAC+B,KAAiBC,KACvB,MAAMC,EAASF,EAAGF,KAAQG,GAE1B,OADAjC,KAAKM,OAAO6B,OAAOX,EAAIU,GAChBA,GAIJE,UAAUC,EAAqDC,GACpE,GAA8B,mBAAnBD,EAET,OADArC,KAAKM,OAAOiC,gBAAgBF,GACrB,IAAMrC,KAAKM,OAAOkC,kBAAkBH,GAE7C,GAA8B,iBAAnBA,EAA6B,CACtC,MAAMI,EAAU,CAACC,EAAeZ,KAC3BY,IAAUL,GAAgBC,EAAWR,IAG1C,OADA9B,KAAKM,OAAOiC,gBAAgBE,GACrB,IAAMzC,KAAKM,OAAOkC,kBAAkBC"}