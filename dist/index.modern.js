import e from"peerjs";import{DocSet as t,Connection as n,init as s}from"automerge";export default class{constructor(n,s={}){this._connections={},this._actorId=n,this._peerInstance=s.peerInstance||new e(this._actorId),this._docSet=s.docSet||new t,this._encode=s.encode||JSON.stringify,this._decode=s.decode||JSON.parse,this._peerInstance.on("connection",e=>{e.on("data",t=>{this._connections[e.peer].receiveMsg(this._decode(t))})})}get docSet(){return this._docSet}connect(e,t){if(this._connections[e])return;const s=t||this._peerInstance.connect(e),o=this._connections[e]=new n(this._docSet,e=>{s.send(this._encode(e))});s.on("disconnected",()=>{o.close(),delete this._connections[e]}),o.open()}select(e){const t=this.docSet.getDoc(e)||s(this._actorId);return(n,...s)=>{const o=n(t,...s);return this.docSet.setDoc(e,o),o}}subscribe(e,t){if("function"==typeof e)return this.docSet.handlers=this.docSet.handlers.add(e),()=>this.docSet.handlers=this.docSet.handlers.delete(e);if("string"==typeof e){const n=(n,s)=>{n===e&&t(s)};return this.docSet.handlers=this.docSet.handlers.add(n),()=>this.docSet.handlers=this.docSet.handlers.delete(n)}}}
//# sourceMappingURL=index.modern.js.map
