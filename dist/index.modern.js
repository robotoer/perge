import e from"peerjs";import{DocSet as t,Connection as n,init as o}from"automerge";export default class{constructor(n,o={}){this._connections={},this._actorId=n,this._peerInstance=o.peerInstance||new e(this._actorId),this._docSet=o.docSet||new t,this._encode=o.encode||JSON.stringify,this._decode=o.decode||JSON.parse,this._peerInstance.on("connection",e=>{e.on("data",t=>{this._connections[e.peer].receiveMsg(this._decode(t)),console.log("Perge received a message!")})})}get docSet(){return this._docSet}connect(e,t){if(this._connections[e])return;const o=t||this._peerInstance.connect(e),s=this._connections[e]=new n(this._docSet,e=>{o.send(this._encode(e)),console.log("Perge sent a message!")});o.on("disconnected",()=>{s.close(),delete this._connections[e],console.log("Perge disconnected!")}),s.open()}select(e){const t=this.docSet.getDoc(e)||o(this._actorId);return(n,...o)=>{const s=n(t,...o);return this.docSet.setDoc(e,s),s}}subscribe(e,t){if("function"==typeof e)return this.docSet.registerHandler(e),()=>this.docSet.unregisterHandler(e);if("string"==typeof e){const n=(n,o)=>{n===e&&t(o)};return this.docSet.registerHandler(n),()=>this.docSet.unregisterHandler(n)}}}
//# sourceMappingURL=index.modern.js.map
