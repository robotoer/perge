!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("peerjs"),require("automerge")):"function"==typeof define&&define.amd?define(["peerjs","automerge"],t):(e=e||self).perge=t(e.peerjs,e.automerge)}(this,function(e,t){return e=e&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e,class{constructor(n,o={}){this._connections={},this._actorId=n,this._peerInstance=o.peerInstance||new e(this._actorId),this._docSet=o.docSet||new t.DocSet,this._encode=o.encode||JSON.stringify,this._decode=o.decode||JSON.parse,this._peerInstance.on("connection",e=>{e.on("data",t=>{this._connections[e.peer].receiveMsg(this._decode(t)),console.log("Perge received a message!")})})}get docSet(){return this._docSet}connect(e,n){if(this._connections[e])return;const o=n||this._peerInstance.connect(e),s=this._connections[e]=new t.Connection(this._docSet,e=>{o.send(this._encode(e)),console.log("Perge sent a message!")});o.on("disconnected",()=>{s.close(),delete this._connections[e],console.log("Perge disconnected!")}),s.open()}select(e){const n=this.docSet.getDoc(e)||t.init(this._actorId);return(t,...o)=>{const s=t(n,...o);return this.docSet.setDoc(e,s),s}}subscribe(e,t){if("function"==typeof e)return this.docSet.registerHandler(e),()=>this.docSet.unregisterHandler(e);if("string"==typeof e){const n=(n,o)=>{n===e&&t(o)};return this.docSet.registerHandler(n),()=>this.docSet.unregisterHandler(n)}}}});
//# sourceMappingURL=index.umd.js.map
